name: Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        uv sync --frozen
        uv pip install safety bandit
    
    - name: Run Safety check
      env:
        SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
      run: |
        # Generate requirements.txt from uv.lock for Safety to scan
        uv pip freeze > requirements.txt
        
        # Run Safety check
        uv run safety check --json --output safety-report.json || true
        
        # Also output in text format for CI logs
        uv run safety check || exit_code=$?
        
        # Exit with the captured code if there were vulnerabilities
        exit ${exit_code:-0}
      continue-on-error: true
    
    - name: Run Bandit security linter
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run bandit -r src/ || true
      continue-on-error: true
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
        retention-days: 30
    
    - name: Comment PR with security status
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## üîí Security Scan Results\n\n';
          
          // Check if safety report exists and has issues
          try {
            const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            if (safetyReport.vulnerabilities && safetyReport.vulnerabilities.length > 0) {
              comment += `‚ö†Ô∏è **Safety found ${safetyReport.vulnerabilities.length} vulnerable dependencies**\n\n`;
            } else {
              comment += '‚úÖ **No vulnerable dependencies found by Safety**\n\n';
            }
          } catch (e) {
            comment += '‚ùì Safety scan results unavailable\n\n';
          }
          
          // Check if bandit report exists and has issues
          try {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            if (banditReport.results && banditReport.results.length > 0) {
              comment += `‚ö†Ô∏è **Bandit found ${banditReport.results.length} potential security issues**\n\n`;
            } else {
              comment += '‚úÖ **No security issues found by Bandit**\n\n';
            }
          } catch (e) {
            comment += '‚ùì Bandit scan results unavailable\n\n';
          }
          
          comment += '*Check the workflow logs for detailed information.*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });